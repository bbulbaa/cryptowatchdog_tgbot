import os
import threading
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from config import TG_TOKEN, TRACKED_COINS
from analytics import get_coin_history, generate_report
from database import init_db
from data_collector import fetch_crypto_prices
import logging

logging.getLogger("httpx").setLevel(logging.WARNING) # —á—Ç–æ–±—ã –Ω–µ —à—É–º–µ–ª–æ 
def start_data_collector():
    """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    fetch_crypto_prices()
    print("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöÄ CryptoWatchDog –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/prices - —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "/report - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ 24 —á–∞—Å–∞"
    )

async def prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        msg = "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã:\n\n"
        
        for coin in TRACKED_COINS:
            history = get_coin_history(coin, limit=1)
            if history:
                last_price = history[0][0]
                msg += f"{coin}: ${last_price:.4f}\n"
            else:
                msg += f"{coin}: –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        
        await update.message.reply_text(msg)
    except Exception as e:
        await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /prices: {str(e)}")

async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        df = generate_report()
        if df.empty:
            await update.message.reply_text("üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã")
            return
            
        await update.message.reply_text(
            f"üìä –û—Ç—á–µ—Ç –∑–∞ 24 —á–∞—Å–∞:\n\n"
            f"```\n{df.to_string(index=False)}\n```",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from data_collector import LAST_UPDATE_TIME  # –î–æ–±–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ data_collector
    
    status_msg = (
        f"üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {LAST_UPDATE_TIME.strftime('%H:%M:%S') if LAST_UPDATE_TIME else '–Ω–∏–∫–æ–≥–¥–∞'}\n"
        f"–ú–æ–Ω–µ—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏: {len(TRACKED_COINS)}"
    )
    await update.message.reply_text(status_msg)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    data_thread = threading.Thread(target=start_data_collector)
    data_thread.daemon = True  # –î–µ–º–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫
    data_thread.start()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TG_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    command_handlers = [
        CommandHandler("start", start),
        CommandHandler("prices", prices),
        CommandHandler("report", report)
    ]
    
    for handler in command_handlers:
        application.add_handler(handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()